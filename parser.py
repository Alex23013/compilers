import reserved_definitions as defs 
TERM = 0
RULE = 1
# ["<TYPE>","<NAME>","[","]","=","<ASSIGN_ESP_OPERATORS>",",","func","(",")",":","void","{","}","return","if","else","elif","while","<STRING>","<ARITHM_OPERATORS>","-","<BOOL_OPERATORS>","!","not","<COMP_OPERATORS>","<NUMBER>","$"],
table = [
[1,1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[7,7,-1,-1,6,-1,-1,7,-1,-1,-1,-1,-1,7,7,7,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,7],
[9,9,-1,-1,8,-1,-1,9,-1,-1,-1,-1,-1,9,9,9,-1,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,9],
[-1,-1,-1,-1,10,11,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,13,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,13,-1,13,-1,-1,-1,-1,13,-1],#,13,-1,-1,13,
[15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,16,-1,-1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[22,22,-1,-1,-1,-1,-1,22,-1,-1,-1,-1,21,-1,-1,22,-1,-1,22,-1,-1,-1,-1,-1,-1,-1,-1,22],
[-1,-1,-1,-1,-1,-1,-1,-1,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,24,-1,-1,25,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[28,28,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,28,28,28,27,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,28],
[30,30,-1,-1,-1,-1,-1,30,-1,-1,-1,-1,-1,30,30,30,30,29,30,-1,-1,-1,-1,-1,-1,-1,-1,30],
[32,32,-1,-1,-1,-1,-1,32,-1,-1,-1,-1,-1,32,32,32,32,31,32,-1,-1,-1,-1,-1,-1,-1,-1,32],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,33,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[34,34,-1,-1,-1,-1,-1,34,-1,-1,-1,-1,-1,-1,-1,34,-1,-1,34,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[35,35,-1,-1,-1,-1,-1,35,-1,-1,-1,-1,-1,-1,-1,35,-1,-1,35,-1,-1,-1,-1,-1,-1,-1,-1,36],
[37,37,-1,-1,-1,-1,-1,38,-1,-1,-1,-1,-1,-1,-1,37,-1,-1,37,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[39,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,39,-1,-1,39,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[40,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,41,41,40,-1,-1,40,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[43,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,42,-1,-1,42,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,44,-1,45,-1,-1,-1,-1,-1,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,44,-1,44,-1,-1,-1,-1,44,-1],
[-1,-1,-1,47,-1,-1,46,-1,-1,47,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,49,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,48,-1,49,-1,-1,-1,-1,49,-1], #48,-1,-1,49
[-1,50,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,50,-1,-1,-1,-1,50,-1],
[52,52,-1,52,-1,-1,52,52,-1,52,-1,-1,-1,52,52,52,-1,-1,52,-1,51,-1,52,-1,-1,52,-1,52],
[-1,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,54,-1,-1,-1,-1,53,-1],
[-1,55,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,55,-1,55,-1,55,55,-1,55,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,57,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,56,-1,-1,-1,-1,-1],
[-1,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,58,-1,58,-1,59,60,-1,58,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,61,-1,-1],
[-1,63,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,64,-1],
[66,66,-1,66,-1,-1,66,66,65,66,-1,-1,-1,66,66,66,-1,-1,66,-1,66,-1,66,-1,-1,66,-1,66]
]

# Those terminals with its key in uppercase accept multiple values
terminals = {
    'TYPE': 0,
    'NAME': 1,
    '[': 2,
    ']': 3,
    '=': 4,
    'ASSIGN_ESP_OPERATORS': 5,
    ',': 6,
    'func': 7,
    '(': 8,
    ')': 9,
    ':': 10,
    'void': 11,
    '{': 11,
    '}': 12,
    'return': 13,
    'if': 14,
    'else': 15,
    'elif': 16,
    'while': 17,
    'STRING': 18,
    'ARITHM_OPERATORS': 19,
    '-': 21,
    'BOOL_OPERATORS': 22,
    '!': 23,
    'not': 24,
    'COMP_OPERATORS': 25,
    'NUMBER': 26,
    '$': 27,
}
    # 'ASSIGN_OPERATOR',
    # 'ARITHMETIC_OPERATOR',
    # 'COMPARATION_OPERATOR',
    # 'BOOLEAN_OPERATOR',
    # 'ASSIGN_ESP_OPERATORS',
    # 'FUNCTION_OPERATOR',
    # 'COMMA',

    # # Reserved words
    # 'TYPE',
    # 'CONTROL_WORD',
    # 'RESERVED_WORD',  # Other reserver words # NOTE: Is this needed?

    # # Variables and values
    # 'NUMBER',
    # 'STRING',
    # 'ARRAY_VALS',  # NOTE: Is this needed?
    # 'NAME',  # represents a variable and function name

    # 'OPEN_BRACKET',
    # 'CLOSE_BRACKET',
    # 'ERROR',
    # 'COMMENT',  # Tokens of this type are removed in the lexical analyzer

non_terminals = {
    'program': 0,
    'def_decl_call': 1,
    'def_decl_call_1': 2,
    'def_decl_call_1_1': 3,
    'def_decl_call_1_2': 4,
    'def_decl_call_2': 5,
    'def_decl_call_2_1': 6,
    'list_var_decl': 7,
    'list_var_decl_1': 8,
    'func_def_decl': 9,
    'func_def_decl_1': 10,
    'func_def_decl_2': 11,
    'func_call_1': 12,
    'control_instructions': 13,
    'if': 14,
    'if_1': 15,
    'elif': 16,
    'elif_1': 17,
    'while': 18,
    'list_instructions': 19,
    'list_instructions_1': 20,
    'instructions': 21,
    'nfd_list_instructions': 22,
    'nfd_list_instructions_1': 23,
    'nfd_instructions': 24,
    'list_any_lex': 25,
    'list_any_lex_1': 26,
    'any_lex': 27,
    'operation': 28,
    'operation_1': 29,
    'operand': 30,
    'bool_operation': 31,
    'bool_operation_1': 32,
    'comp_operation': 33,
    'comp_operation_1': 34,
    'value': 35,
    'value_1': 36,
}

